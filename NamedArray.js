/** *  */function change2string(id){    return "" + id;}/** *  */function NamedArrayEntry(name, value){    var functions =        {            getValue : function(compareString)            {                return this.value;            },            compare : function(compareString)            {                var name = this.name;                var nametype = typeof name;                var comparetype = typeof compareString;                if (nametype != "string" || comparetype != "string")                {                    var atype = nametype;                }                return name.localeCompare(compareString);            }        };    this.name = name;    this.value = value;    this.canUpdate = typeof (value.update) != 'undefined';    for ( var k in functions)        this[k] = functions[k];}/** *  */function NamedArray(){    var functions =        {            /**             *              */            put : function(name, value)            {                if (typeof name == "number")                {                    name = change2string(name);                }                if (typeof name != "string")                {                    var nametype = typeof name;                    var nametypecopy = nametype;                }                var retval = this.getEntry(name);                if (retval == null)                {                    this.array[this.array.length] = new NamedArrayEntry(name, value);                    return value;                }                else                {                    if (retval.canUpdate)                    {                        retval.value.update(value);                        return retval.value;                    }                }                return null;            },            getEntry : function(name)            {                if (typeof name == "number")                {                    name = change2string(name);                }                var arrlength = this.array.length;                for (var i = 0; i < arrlength; i++)                {                    if (this.array[i].compare(name) == 0)                    {                        return this.array[i];                    }                }                return null;            },            get : function(name)            {                if (typeof name == "number")                {                    name = change2string(name);                }                var retval = this.getEntry(name);                if (retval != null)                {                    return retval.value;                }                return null;            },            overWrite : function(name, value)            {                if (typeof name == "number")                {                    name = change2string(name);                }                var retval = this.getEntry(name);                if (retval == null)                {                    this.array[this.array.length] = new NamedArrayEntry(name, value);                    return value;                }                else                {                    retval.value = value;                    retval.canUpdate = typeof (value.update) != 'undefined';                    return retval.value;                }                return null;            },            getIterator : function()            {                var retval = [];                for (i = 0; i < this.array.length; i++)                {                    retval.push(this.array[i].name);                }                return retval;            },            size : function()            {                return this.array.length;            }        };    this.array = [];    for ( var k in functions)        this[k] = functions[k];    this.class = "NamedArray";}